{"version":3,"sources":["vdom/createElement.js","vdom/render.js","vdom/mount.js","vdom/diff.js","main.js"],"names":["createElement","tagName","attrs","children","vElem","Object","create","assign","render","renderElem","$el","document","entries","k","v","setAttribute","child","appendChild","vNode","createTextNode","mount","$node","$target","replaceWith","diff","diffAttrs","oldAttrs","newAttrs","patches","push","removeAttribute","patch","zip","xs","ys","zipped","i","Math","min","length","diffChildren","oldVChildren","newVChildren","childPatches","forEach","oldVChild","additionalPatches","additionalVChild","slice","$parent","childNodes","oldVTree","newVTree","undefined","remove","$newNode","patchAttrs","patchChildren","createVApp","count","id","dataCount","String","Array","from","style","src","vApp","$app","$rootEl","getElementById","setInterval","n","random","vNewApp"],"mappings":"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","file":"main.56aace53.map","sourceRoot":"../src","sourcesContent":["const createElement = (tagName, {\n    attrs = {},\n    children = [],\n} = {}) => {\n    var vElem = Object.create(null);\n\n    return Object.assign(vElem, {\n        tagName,\n        attrs,\n        children,\n    });\n};\n\nexport default createElement;","const renderElem = ({\n    tagName,\n    attrs = {},\n    children = [],\n}) => {\n    const $el = document.createElement(tagName);\n\n    for (const [k, v] of Object.entries(attrs)) {\n        $el.setAttribute(k, v);\n    }\n\n    for (const child of children) {\n        $el.appendChild(render(child));\n    }\n\n    return $el;\n};\n\nconst render = (vNode) => {\n    if (typeof vNode === 'string') {\n        return document.createTextNode(vNode);\n    }\n\n    return renderElem(vNode);\n};\n\nexport default render;","const mount = ($node, $target) => {\n    $target.replaceWith($node);\n\n    return $node;\n};\n\nexport default mount;","import render from './render';\n\nconst diffAttrs = (oldAttrs, newAttrs) => {\n    const patches = [];\n\n    // setting newAttrs\n    for (const [k, v] of Object.entries(newAttrs)) {\n        patches.push($node => {\n            $node.setAttribute(k, v);\n            return $node;\n        });\n    }\n\n    // removing attrs\n    for (const k in oldAttrs) {\n        if (!(k in newAttrs)) {\n            patches.push($node => {\n                $node.removeAttribute(k);\n                return $node;\n            });\n        }\n    }\n\n    return $node => {\n        for (const patch of patches) {\n            patch($node);\n        }\n        return $node;\n    };\n};\n\nconst zip = (xs, ys) => {\n    const zipped = [];\n\n    for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\n        zipped.push([xs[i], ys[i]]);\n    }\n\n    return zipped;\n};\n\nconst diffChildren = (oldVChildren, newVChildren) => {\n    const childPatches = [];\n\n    oldVChildren.forEach((oldVChild, i) => {\n        childPatches.push(diff(oldVChild, newVChildren[i]));\n    });\n\n    const additionalPatches = [];\n    for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n        additionalPatches.push($node => {\n            $node.appendChild(render(additionalVChild));\n            return $node;\n        });\n    }\n\n    return $parent => {\n        /*\n        $parent.childNodes.forEach(($child, i) => {\n            childPatches[i]($child);\n        });\n        */\n\n        for (const [patch, $child] of zip(childPatches, $parent.childNodes)) {\n            patch($child);\n        }\n\n        for (const patch of additionalPatches) {\n            patch($parent);\n        }\n        return $parent;\n    };\n};\n\nconst diff = (oldVTree, newVTree) => {\n    if (newVTree === undefined) {\n        return $node => {\n            $node.remove();\n            return;\n        };\n    }\n\n    if (typeof oldVTree === 'string' || typeof newVTree === 'string') {\n        if (oldVTree !== newVTree) {\n            return $node => {\n                const $newNode = render(newVTree);\n                $node.replaceWith($newNode);\n                return $newNode;\n            };\n        } else {\n            return $node => $node;\n        }\n    }\n\n    if (oldVTree.tagName !== newVTree.tagName) {\n        return $node => {\n            const $newNode = render(newVTree);\n            $node.replaceWith($newNode);\n            return $newNode;\n        };\n    }\n\n    const patchAttrs = diffAttrs(oldVTree.attrs, newVTree.attrs);\n    const patchChildren = diffChildren(oldVTree.children, newVTree.children);\n\n    return $node => {\n        patchAttrs($node);\n        patchChildren($node);\n        return $node;\n    };\n};\n\nexport default diff;","import createElement from './vdom/createElement';\nimport render from './vdom/render';\nimport mount from './vdom/mount';\nimport diff from './vdom/diff';\n\nconst createVApp = count => createElement('div', {\n    attrs: {\n        id: 'app',\n        dataCount: count,\n    },\n    children: [\n        'The current count is: ',\n        String(count),\n        createElement('div', {\n            children: Array.from({\n                length: count\n            }, () => createElement('img', {\n                attrs: {\n                    style: \"height: 50px; width: 50px\",\n                    src: 'http://cdn.arguments.cn/logo.png',\n                },\n            })),\n        })\n    ],\n});\n\nlet vApp = createVApp(0);\nconst $app = render(vApp);\n\nlet $rootEl = mount($app, document.getElementById('app'));\n\nsetInterval(() => {\n    const n = ~~(Math.random() * 10);\n    const vNewApp = createVApp(n);\n    const patch = diff(vApp, vNewApp);\n\n    $rootEl = patch($rootEl);\n\n    vApp = vNewApp;\n}, 1000)"]}