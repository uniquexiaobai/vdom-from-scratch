{"version":3,"sources":["vdom/createElement.js","vdom/render.js","vdom/mount.js","vdom/diff.js","main.js"],"names":["createElement","tagName","attrs","children","vElem","Object","create","assign","renderElem","$el","document","entries","k","v","setAttribute","child","appendChild","render","vNode","createTextNode","mount","$node","$target","replaceWith","diffAttrs","oldAttrs","newAttrs","patches","push","removeAttribute","patch","zip","xs","ys","zipped","i","Math","min","length","diffChildren","oldVChildren","newVChildren","childPatches","forEach","oldVChild","diff","additionalPatches","additionalVChild","slice","$parent","childNodes","$child","oldVTree","newVTree","undefined","remove","$newNode","patchAttrs","patchChildren","createVApp","count","id","dataCount","String","Array","from","style","src","vApp","$app","$rootEl","getElementById","setInterval","n","random","vNewApp"],"mappings":"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","file":"main.1f19ae8e.map","sourceRoot":"../src","sourcesContent":["const createElement = (tagName, {\n    attrs = {},\n    children = [],\n} = {}) => {\n    var vElem = Object.create(null);\n\n    return Object.assign(vElem, {\n        tagName,\n        attrs,\n        children,\n    });\n};\n\nexport default createElement;","const renderElem = ({\n    tagName,\n    attrs = {},\n    children = [],\n}) => {\n    const $el = document.createElement(tagName);\n\n    for (const [k, v] of Object.entries(attrs)) {\n        $el.setAttribute(k, v);\n    }\n\n    for (const child of children) {\n        $el.appendChild(render(child));\n    }\n\n    return $el;\n};\n\nconst render = (vNode) => {\n    if (typeof vNode === 'string') {\n        return document.createTextNode(vNode);\n    }\n\n    return renderElem(vNode);\n};\n\nexport default render;","const mount = ($node, $target) => {\n    $target.replaceWith($node);\n\n    return $node;\n};\n\nexport default mount;","import render from './render';\n\nconst diffAttrs = (oldAttrs, newAttrs) => {\n    const patches = [];\n\n    // setting newAttrs\n    for (const [k, v] of Object.entries(newAttrs)) {\n        patches.push($node => {\n            $node.setAttribute(k, v);\n            return $node;\n        });\n    }\n\n    // removing attrs\n    for (const k in oldAttrs) {\n        if (!(k in newAttrs)) {\n            patches.push($node => {\n                $node.removeAttribute(k);\n                return $node;\n            });\n        }\n    }\n\n    return $node => {\n        for (const patch of patches) {\n            patch($node);\n        }\n        return $node;\n    };\n};\n\nconst zip = (xs, ys) => {\n    const zipped = [];\n\n    for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\n        zipped.push([xs[i], ys[i]]);\n    }\n\n    return zipped;\n};\n\nconst diffChildren = (oldVChildren, newVChildren) => {\n    const childPatches = [];\n\n    oldVChildren.forEach((oldVChild, i) => {\n        childPatches.push(diff(oldVChild, newVChildren[i]));\n    });\n\n    const additionalPatches = [];\n    for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n        additionalPatches.push($node => {\n            $node.appendChild(render(additionalVChild));\n            return $node;\n        });\n    }\n\n    return $parent => {\n        /*\n        $parent.childNodes.forEach(($child, i) => {\n            childPatches[i]($child);\n        });\n        */\n\n        for (const [patch, $child] of zip(childPatches, $parent.childNodes)) {\n            patch($child);\n        }\n\n        for (const patch of additionalPatches) {\n            patch($parent);\n        }\n        return $parent;\n    };\n};\n\nconst diff = (oldVTree, newVTree) => {\n    if (newVTree === undefined) {\n        return $node => {\n            $node.remove();\n            return;\n        };\n    }\n\n    if (typeof oldVTree === 'string' || typeof newVTree === 'string') {\n        if (oldVTree !== newVTree) {\n            return $node => {\n                const $newNode = render(newVTree);\n                $node.replaceWith($newNode);\n                return $newNode;\n            };\n        } else {\n            return $node => $node;\n        }\n    }\n\n    if (oldVTree.tagName !== newVTree.tagName) {\n        return $node => {\n            const $newNode = render(newVTree);\n            $node.replaceWith($newNode);\n            return $newNode;\n        };\n    }\n\n    const patchAttrs = diffAttrs(oldVTree.attrs, newVTree.attrs);\n    const patchChildren = diffChildren(oldVTree.children, newVTree.children);\n\n    return $node => {\n        patchAttrs($node);\n        patchChildren($node);\n        return $node;\n    };\n};\n\nexport default diff;","import createElement from './vdom/createElement';\nimport render from './vdom/render';\nimport mount from './vdom/mount';\nimport diff from './vdom/diff';\n\nconst createVApp = count => createElement('div', {\n    attrs: {\n        id: 'app',\n        dataCount: count,\n    },\n    children: [\n        'The current count is: ',\n        String(count),\n        createElement('div', {\n            children: Array.from({\n                length: count\n            }, () => createElement('img', {\n                attrs: {\n                    style: \"height: 50px; width: 50px\",\n                    src: 'http://cdn.arguments.cn/logo.png',\n                },\n            })),\n        })\n    ],\n});\n\nlet vApp = createVApp(0);\nconst $app = render(vApp);\n\nlet $rootEl = mount($app, document.getElementById('app'));\n\nsetInterval(() => {\n    const n = ~~(Math.random() * 10);\n    const vNewApp = createVApp(n);\n    const patch = diff(vApp, vNewApp);\n\n    $rootEl = patch($rootEl);\n\n    vApp = vNewApp;\n}, 1000)"]}